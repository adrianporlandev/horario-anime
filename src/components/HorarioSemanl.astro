---
import { horario } from "../data/horario";

// Organizar el horario por día
const horarioPorDia = horario.reduce(
  (acc, evento) => {
    if (!acc[evento.dia]) {
      acc[evento.dia] = [];
    }
    acc[evento.dia].push(evento);
    return acc;
  },
  {} as Record<string, typeof horario>
);

// Orden de los días de la semana
const ordenDias = [
  "Lunes",
  "Martes",
  "Miercoles",
  "Jueves",
  "Viernes",
  "Sabado",
  "Domingo",
];

// Filtrar y ordenar los días que tienen eventos
const diasConEventos = ordenDias.filter((dia) => horarioPorDia[dia]);

// Función para determinar el color basado en el tipo
function getColor(tipo: string) {
  return tipo === "Anime"
    ? "bg-blue-800 text-blue-100"
    : "bg-green-800 text-green-100";
}

// Obtener el día actual
const diasSemana = [
  "Domingo",
  "Lunes",
  "Martes",
  "Miercoles",
  "Jueves",
  "Viernes",
  "Sabado",
];
const diaActual = diasSemana[new Date().getDay()];
---

<div class="max-w-6xl mx-auto p-4">
  <h2 class="text-3xl font-bold text-center mb-8 text-gray-100">
    Horario Semanal de Anime y Manga
  </h2>
  <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-6">
    {
      diasConEventos.map((dia) => (
        <div
          class={`horario-dia bg-gray-800 shadow-lg rounded-lg overflow-hidden border border-gray-700`}
          data-dia={dia}
        >
          <div class="bg-gray-700 text-gray-100 px-4 py-2 font-semibold">
            {dia}
          </div>
          <ul class="divide-y divide-gray-700">
            {horarioPorDia[dia]
              .sort((a, b) => a.hora.localeCompare(b.hora))
              .map((evento) => (
                <li class="px-4 py-3 flex justify-between items-center hover:bg-gray-750 transition-colors duration-200">
                  <div>
                    <p class="font-medium text-gray-100">{evento.nombre}</p>
                    <p class="text-sm text-gray-400">{evento.hora}</p>
                    {evento.fecha && (
                      <p class="text-xs text-yellow-300 mt-1 countdown" data-fecha={evento.fecha}>
                        Calculando...
                      </p>
                    )}
                  </div>
                  <span
                    class={`px-2 py-1 rounded-full text-xs font-medium ${getColor(evento.tipo)}`}
                  >
                    {evento.tipo}
                  </span>
                </li>
              ))}
          </ul>
        </div>
      ))
    }
  </div>
</div>

<script>
  function actualizarDiaActual() {
    const diasSemana = [
      "Domingo",
      "Lunes",
      "Martes",
      "Miercoles",
      "Jueves",
      "Viernes",
      "Sabado",
    ];
    const diaActual = diasSemana[new Date().getDay()];

    // Remover el borde amarillo de todos los días
    document.querySelectorAll(".horario-dia").forEach((elemento) => {
      elemento.classList.remove("border-yellow-500");
    });

    // Agregar el borde amarillo al día actual
    const diaActualElemento = document.querySelector(
      `[data-dia="${diaActual}"]`
    );
    if (diaActualElemento) {
      diaActualElemento.classList.add("border-yellow-500");
    }
  }

  function actualizarCountdowns() {
    document.querySelectorAll('.countdown').forEach(el => {
      const fechaTexto = el.getAttribute('data-fecha');
      if (!fechaTexto) return;
      // Suponemos formato: '15 Julio'
      const meses = {
        'Enero': 0, 'Febrero': 1, 'Marzo': 2, 'Abril': 3, 'Mayo': 4, 'Junio': 5,
        'Julio': 6, 'Agosto': 7, 'Septiembre': 8, 'Octubre': 9, 'Noviembre': 10, 'Diciembre': 11
      };
      const partes = fechaTexto.split(' ');
      if (partes.length < 2) return;
      const dia = parseInt(partes[0], 10);
      const mes = meses[partes[1]];
      let year = new Date().getFullYear();
      // Si la fecha ya pasó este año, mostrar para el año siguiente
      const fechaEvento = new Date(year, mes, dia, 0, 0, 0);
      if (fechaEvento < new Date()) {
        fechaEvento.setFullYear(year + 1);
      }
      const diff = fechaEvento - new Date();
      if (diff <= 0) {
        el.style.display = 'none'; // Oculta el contador cuando llega a 0
        return;
      }
      const dias = Math.floor(diff / (1000 * 60 * 60 * 24));
      const horas = Math.floor((diff / (1000 * 60 * 60)) % 24);
      const minutos = Math.floor((diff / (1000 * 60)) % 60);
      el.textContent = `Faltan ${dias}d ${horas}h ${minutos}m`;
      el.style.display = '';
    });
  }

  // Actualizar inmediatamente
  actualizarDiaActual();
  actualizarCountdowns();

  // Actualizar cada minuto
  setInterval(() => {
    actualizarDiaActual();
    actualizarCountdowns();
  }, 60000);
</script>
